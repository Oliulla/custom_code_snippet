{
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log($TM_SELECTED_TEXT);"
		],
		"description": "Log output to console"
	}
}
{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Get all data from a collection": {
	// 	"scope": "javascript",
	// 	"prefix": "app.get",
	// 	"body": "app.get('/$1', async (req, res) => { try { const $2 = await $3.find({}).toArray(); if (data) { res.json({status: true,message: '$4 got successfully',data: $5,});} else {res.json({status: false,message: 'data got failed',data: []});}} catch (error) {res.json({status: false,message: error.message,});}});",
	// 	"description": "Mongodb"
	// },

	"Get all data from a collection": {
		"scope": "javascript",
		"prefix": "app.get",
		"body": ["app.get('/$1', async (req, res) => {",
			"try {",
			  "const $1 = await $2.find({}).toArray();",
			  "if ($1) {",
				"res.json({ status: true, message: '$1 got successfully', data: $1 });",
			  "} else {",
				"res.json({ status: false, message: 'data got failed', data: [] });",
			  "}",
			"} catch (error) {",
			  "res.json({ status: false, message: error.message });",
			"}",
		  "});"
		],
		"description": "Mongodb"
	},

	"Get data by query": {
		"scope": "javascript",
		"prefix": "app.get.query",
		"body": ["app.get('/$1/:$2', async (req, res) => {",
			"try {",
			"const query = req.params?.$2;",
			  "const $1 = await $3.findOne({query});",
			  "if ($1) {",
				"res.json({ status: true, message: '$1 got successfully', data: $1 });",
			  "} else {",
				"res.json({ status: false, message: 'data got failed', data: [] });",
			  "}",
			"} catch (error) {",
			  "res.json({ status: false, message: error.message });",
			"}",
		  "});"
		],
		"description": "Mongodb"
	},

	"Server getting ready": {
		"scope": "javascript",
		"prefix": "reqserver",
		"body": [
			"const express = require('express');",
			"const cors = require('cors');",
			"const { MongoClient, ServerApiVersion, ObjectId } = require('mongodb');",
			"require('dotenv').config();",
			"const app = express();",
			"",
			"const port = process.env.PORT || '5000';",
			"",
			"// middlewares",
			"app.use(cors());",
			"app.use(express.json());",
			"",
			"const uri = `mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASSWORD}@cluster0.g9drewa.mongodb.net/?retryWrites=true&w=majority`;",
			"const client = new MongoClient(uri, {",
			"useNewUrlParser: true,",
			"useUnifiedTopology: true,",
			"serverApi: ServerApiVersion.v1,",
		"});",
			"",
			"",
			"// run mongodb",
			"async function dbConnect() {",
				"try {",
				"await client.connect();",
				"console.log('database connected');",
				"",
				"// database collections",
				"",
				"",
				"} finally {}",
			"}",
			"dbConnect().catch(err => console.log(err));",
			"",
			"",
			"// test server endpoint",
			"app.get('/', (req, res) => {",
			"res.json({",
			"status: true,",
			"message: '$1 server is ready to use',",
			"});",
			"});",
			"",
			"app.listen(port, () => {",
			"console.log(`$1 server is running on: ${port}`);",
			"});",
		],
		"description": "Mongodb"
	},
}